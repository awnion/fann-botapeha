#############################################################################
# Makefile for building: botapeha
# Generated by qmake (2.01a) (Qt 4.5.1) on: ?? 8. ??? 02:53:36 2009
# Project:  botapeha.pro
# Template: app
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DUNICODE -DQT_LARGEFILE_SUPPORT -DQT_DLL -DQT_NO_DEBUG -DQT_WEBKIT_LIB -DQT_GUI_LIB -DQT_NETWORK_LIB -DQT_CORE_LIB -DQT_THREAD_SUPPORT -DQT_NEEDS_QMAIN
CFLAGS        = -O2 -Wall $(DEFINES)
CXXFLAGS      = -O2 -frtti -fexceptions -mthreads -Wall $(DEFINES)
INCPATH       = -I'd:/winapp/Qt/qt/include/QtCore' -I'd:/winapp/Qt/qt/include/QtNetwork' -I'd:/winapp/Qt/qt/include/QtGui' -I'd:/winapp/Qt/qt/include/QtWebKit' -I'd:/winapp/Qt/qt/include' -I'include/fann/include' -I'd:/winapp/Qt/qt/include/ActiveQt' -I'build' -I'ui' -I'd:/winapp/Qt/qt/mkspecs/win32-g++'
LINK        =        g++
LFLAGS        =        -enable-stdcall-fixup -Wl,-enable-auto-import -Wl,-enable-runtime-pseudo-reloc -Wl,-s -mthreads -Wl -Wl,-subsystem,windows
LIBS        =        -L'd:/winapp/Qt/qt/lib' -lmingw32 -lqtmain -lQtWebKit4 -lQtGui4 -lQtNetwork4 -lQtCore4
QMAKE         = d:/winapp/Qt/qt/bin/qmake.exe
IDC           = d:/winapp/Qt/qt/bin/idc.exe
IDL           = midl
ZIP           = zip -r -9
DEF_FILE      = 
RES_FILE      = 
COPY          = cp
COPY_FILE     = $(COPY)
COPY_DIR      = xcopy /s /q /y /i
DEL_FILE      = rm
DEL_DIR       = rmdir
MOVE          = mv
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir
INSTALL_FILE    = $(COPY_FILE)
INSTALL_PROGRAM = $(COPY_FILE)
INSTALL_DIR     = $(COPY_DIR)

####### Output directory

OBJECTS_DIR   = build/

####### Files

SOURCES       = src/captcha.cpp \
		src/main.cpp \
		src/mainwindow.cpp \
		src/symbol.cpp \
		include/fann/floatfann.c build/moc_mainwindow.cpp
OBJECTS       = build/captcha.o \
		build/main.o \
		build/mainwindow.o \
		build/symbol.o \
		build/floatfann.o \
		build/moc_mainwindow.o
DIST          = 
QMAKE_TARGET  = botapeha
DESTDIR        = release/ #avoid trailing-slash linebreak
TARGET         = botapeha.exe
DESTDIR_TARGET = release/botapeha.exe

####### Implicit rules

.SUFFIXES: .cpp .cc .cxx .c

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

first: all
all: Makefile.Release  $(DESTDIR_TARGET)

$(DESTDIR_TARGET): ui/ui_mainwindow.h $(OBJECTS) 
	$(LINK) $(LFLAGS) -o $(DESTDIR_TARGET) $(OBJECTS)  $(LIBS)


qmake:  FORCE
	@$(QMAKE) -spec d:/winapp/Qt/qt/mkspecs/win32-g++ -win32 CONFIG+=release -o Makefile.Release botapeha.pro

dist:
	$(ZIP) botapeha.zip $(SOURCES) $(DIST) botapeha.pro d:/winapp/Qt/qt/mkspecs/qconfig.pri d:/winapp/Qt/qt/mkspecs/features/qt_functions.prf d:/winapp/Qt/qt/mkspecs/features/qt_config.prf d:/winapp/Qt/qt/mkspecs/features/exclusive_builds.prf d:/winapp/Qt/qt/mkspecs/features/default_pre.prf d:/winapp/Qt/qt/mkspecs/features/win32/default_pre.prf d:/winapp/Qt/qt/mkspecs/features/release.prf d:/winapp/Qt/qt/mkspecs/features/debug_and_release.prf d:/winapp/Qt/qt/mkspecs/features/default_post.prf d:/winapp/Qt/qt/mkspecs/features/win32/default_post.prf d:/winapp/Qt/qt/mkspecs/features/build_pass.prf d:/winapp/Qt/qt/mkspecs/features/win32/rtti.prf d:/winapp/Qt/qt/mkspecs/features/win32/exceptions.prf d:/winapp/Qt/qt/mkspecs/features/win32/stl.prf d:/winapp/Qt/qt/mkspecs/features/shared.prf d:/winapp/Qt/qt/mkspecs/features/warn_on.prf d:/winapp/Qt/qt/mkspecs/features/qt.prf d:/winapp/Qt/qt/mkspecs/features/win32/thread.prf d:/winapp/Qt/qt/mkspecs/features/moc.prf d:/winapp/Qt/qt/mkspecs/features/win32/windows.prf d:/winapp/Qt/qt/mkspecs/features/resources.prf d:/winapp/Qt/qt/mkspecs/features/uic.prf d:/winapp/Qt/qt/mkspecs/features/yacc.prf d:/winapp/Qt/qt/mkspecs/features/lex.prf d:\winapp\Qt\qt\lib\qtmain.prl  HEADERS RESOURCES IMAGES SOURCES OBJECTIVE_SOURCES FORMS YACCSOURCES YACCSOURCES LEXSOURCES 

clean: compiler_clean 
	-$(DEL_FILE) build/captcha.o build/main.o build/mainwindow.o build/symbol.o build/floatfann.o build/moc_mainwindow.o

distclean: clean
	-$(DEL_FILE) $(DESTDIR_TARGET)
	-$(DEL_FILE) Makefile.Release

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: build/moc_mainwindow.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) build/moc_mainwindow.cpp
build/moc_mainwindow.cpp: src/captcha.h \
		src/symbol.h \
		src/mainwindow.h
	d:/winapp/Qt/qt/bin/moc.exe $(DEFINES) $(INCPATH) -D__GNUC__ -DWIN32 src/mainwindow.h -o build/moc_mainwindow.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all: ui/ui_mainwindow.h
compiler_uic_clean:
	-$(DEL_FILE) ui/ui_mainwindow.h
ui/ui_mainwindow.h: ui/mainwindow.ui
	d:/winapp/Qt/qt/bin/uic.exe ui/mainwindow.ui -o ui/ui_mainwindow.h

compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean compiler_uic_clean 



####### Compile

build/captcha.o: src/captcha.cpp src/captcha.h \
		src/symbol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/captcha.o src/captcha.cpp

build/main.o: src/main.cpp src/mainwindow.h \
		src/captcha.h \
		src/symbol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/main.o src/main.cpp

build/mainwindow.o: src/mainwindow.cpp src/mainwindow.h \
		src/captcha.h \
		src/symbol.h \
		ui/ui_mainwindow.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/mainwindow.o src/mainwindow.cpp

build/symbol.o: src/symbol.cpp src/symbol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/symbol.o src/symbol.cpp

build/floatfann.o: include/fann/floatfann.c include/fann/fann.c \
		include/fann/fann_io.c \
		include/fann/fann_train.c \
		include/fann/fann_train_data.c \
		include/fann/fann_error.c \
		include/fann/fann_cascade.c
	$(CC) -c $(CFLAGS) $(INCPATH) -o build/floatfann.o include/fann/floatfann.c

build/moc_mainwindow.o: build/moc_mainwindow.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/moc_mainwindow.o build/moc_mainwindow.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

